// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "airports",
    columns: [
      { name: "name", type: "string" },
      { name: "iata", type: "string" },
      { name: "city", type: "string" },
      { name: "country", type: "string" },
    ],
  },
  { name: "birds", columns: [{ name: "species", type: "string" }] },
  {
    name: "flights",
    columns: [
      { name: "registration", type: "string" },
      { name: "number", type: "string" },
      { name: "airplane", type: "string" },
    ],
  },
  {
    name: "impacts",
    columns: [
      { name: "date", type: "datetime" },
      { name: "bird", type: "link", link: { table: "birds" } },
      { name: "flight", type: "link", link: { table: "flights" } },
      { name: "airport", type: "link", link: { table: "airports" } },
      { name: "bird_weight", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Airports = InferredTypes["airports"];
export type AirportsRecord = Airports & XataRecord;

export type Birds = InferredTypes["birds"];
export type BirdsRecord = Birds & XataRecord;

export type Flights = InferredTypes["flights"];
export type FlightsRecord = Flights & XataRecord;

export type Impacts = InferredTypes["impacts"];
export type ImpactsRecord = Impacts & XataRecord;

export type DatabaseSchema = {
  airports: AirportsRecord;
  birds: BirdsRecord;
  flights: FlightsRecord;
  impacts: ImpactsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Catacrocker-cmnii9.eu-west-1.xata.sh/db/stagging",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
